{"version":3,"file":"static/webpack/static\\development\\pages\\projects.js.376c5dacd53dd54f6ebd.hot-update.js","sources":["webpack:///./util/projectData.ts"],"sourcesContent":["import { Project } from '../interfaces'\r\nimport projects from './projects.json'\r\nimport 'isomorphic-unfetch'\r\n\r\n\r\n/** Static project data. */\r\nexport const dataArray: Array<Project> = projects;\r\n/**\r\n * Calls a mock API which finds a project by SLUG from the list above.\r\n *\r\n * Throws an error if not found.\r\n */\r\nexport function findData(slug: string) {\r\n    const selected = dataArray.find(data => data.slug === slug)\r\n\r\n    if (!selected) {\r\n        throw new Error('Cannot find project')\r\n    }\r\n\r\n    return selected\r\n}\r\n\r\nexport async function getMarkdown(slug: string): Promise<string> {\r\n\r\n    return new Promise<string>(async (resolve, reject) => {\r\n        const selected = dataArray.find(data => data.slug === slug)\r\n        if (!selected) {\r\n            reject(new Error(\"No project matches the slug\"));\r\n        } else {\r\n            const response = await fetch(selected.markdownUrl);\r\n        }\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n    /*     const selected = dataArray.find(data => data.slug === slug)\r\n        if(!selected){\r\n            return Promise.reject(new Error(\"No project matches the slug\")); \r\n        }\r\n        const response = await fetch(selected.markdownUrl);\r\n        if(!response.ok){\r\n            return Promise.reject(new Error(response.statusText)); \r\n        }    \r\n        console.log(response.text)\r\n        return new Promise(response.text); */\r\n}\r\n\r\n/** Calls a mock API which returns the above array to simulate \"get all\". */\r\nexport function findAll() {\r\n    // Throw an error, just for example.\r\n    if (!Array.isArray(dataArray)) {\r\n        throw new Error('Cannot find projects')\r\n    }\r\n\r\n    return dataArray\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAGA;AACA;AAAA;AACA;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AA4BA;AACA;;;;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}